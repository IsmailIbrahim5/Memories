package com.idea.memories.Views.Fragments;import android.animation.Animator;import android.animation.AnimatorListenerAdapter;import android.animation.ObjectAnimator;import android.animation.ValueAnimator;import android.os.Bundle;import android.text.Editable;import android.text.TextWatcher;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.ViewTreeObserver;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.TextView;import com.idea.memories.R;import com.idea.memories.Classes.MemoriesGenerator;import com.idea.memories.Classes.Memory;import com.google.android.material.floatingactionbutton.FloatingActionButton;import java.util.ArrayList;import com.idea.memories.Adapters.MemoriesAdapter;import androidx.cardview.widget.CardView;import androidx.fragment.app.Fragment;import androidx.recyclerview.widget.GridLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat;public class TrashFragment extends Fragment {    MemoriesAdapter adapter;    public RecyclerView recyclerView;    ArrayList<Memory> arrayList;    public View.OnClickListener onClickListener;    FloatingActionButton search_fab;    EditText search_bar;    CardView search_container;    LinearLayout logo_container;    TextView logo;    TextView rash;    boolean is_search_on;    int logo_width;    AnimatedVectorDrawableCompat search_anim, reverse_search_anim;    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             final Bundle savedInstanceState) {        final View root = inflater.inflate(R.layout.fragment_trash, container, false);        recyclerView = root.findViewById(R.id.recycler_view);        recyclerView.setHasFixedSize(false);//        recyclerView.setItemAnimator(null);        recyclerView.setLayoutManager(new GridLayoutManager(getContext(), 2));        final MemoriesGenerator memoriesGenerator = new MemoriesGenerator(getContext());        arrayList = memoriesGenerator.generateDeleted();        adapter = new MemoriesAdapter(getContext(),  getActivity(),arrayList , 2 , onClickListener);        recyclerView.setAdapter(adapter);        search_fab = root.findViewById(R.id.search_fab);        search_bar = root.findViewById(R.id.search_bar);        search_container = root.findViewById(R.id.search_container);        logo_container = root.findViewById(R.id.logo_container);        rash = root.findViewById(R.id.rash);        logo = root.findViewById(R.id.logo);        root.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {            @Override            public boolean onPreDraw() {                root.getViewTreeObserver().removeOnPreDrawListener(this);                search_container.setPivotX(search_bar.getWidth());                logo_container.setPivotX(0);                return true;            }        });        search_anim = AnimatedVectorDrawableCompat.create(getContext() , R.drawable.anim_search_to_done);        reverse_search_anim = AnimatedVectorDrawableCompat.create(getContext() , R.drawable.anim_done_to_search);        search_fab.setImageDrawable(search_anim);        search_bar.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {                adapter.memories.clear();                if(!s.toString().trim().isEmpty()) {                    adapter.memories = memoriesGenerator.search(s.toString() ,2);                    adapter.setSearchKey(s.toString());                    adapter.notifyDataSetChanged();                }                else{                    adapter.memories = memoriesGenerator.generateDeleted();                    adapter.notifyDataSetChanged();                }            }            @Override            public void afterTextChanged(Editable s) {            }        });        search_fab.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if(is_search_on){                        adapter.memories.clear();                        adapter.setSearchKey(null);                        adapter.memories = memoriesGenerator.generateDeleted();                    adapter.notifyDataSetChanged();                    is_search_on = false;                    search_fab.setImageDrawable(reverse_search_anim);                    reverse_search_anim.start();                    ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(search_container , "scaleX" , 0);                    objectAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {                        @Override                        public void onAnimationUpdate(ValueAnimator animation) {                            float value = (float) animation.getAnimatedValue();                            logo_container.setScaleX(1-value);                        }                    });                    objectAnimator.start();                    objectAnimator.addListener(new AnimatorListenerAdapter() {                        @Override                        public void onAnimationEnd(Animator animation) {                            search_bar.setVisibility(View.GONE);                            search_fab.setImageResource(R.drawable.ic_search);                        }                    });                }                else {                    search_bar.setVisibility(View.VISIBLE);                    is_search_on = true;                    search_fab.setImageDrawable(search_anim);                    search_anim.start();                    ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(search_container , "scaleX" , 1);                    objectAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {                        @Override                        public void onAnimationUpdate(ValueAnimator animation) {                            float value = (float) animation.getAnimatedValue();                            logo_container.setScaleX(1-value);                        }                    });                    objectAnimator.start();                }            }        });        return root;    }}