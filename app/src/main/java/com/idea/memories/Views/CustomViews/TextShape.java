package com.idea.memories.Views.CustomViews;import android.annotation.SuppressLint;import android.content.Context;import android.content.res.AssetManager;import android.content.res.TypedArray;import android.graphics.Bitmap;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Matrix;import android.graphics.Paint;import android.graphics.Path;import android.graphics.RectF;import android.graphics.Typeface;import android.graphics.drawable.Drawable;import android.util.AttributeSet;import android.util.Log;import com.idea.memories.R;import androidx.appcompat.widget.AppCompatTextView;import androidx.core.graphics.PathParser;public class TextShape extends AppCompatTextView {    private String pathString;    private float pathHeight, pathWidth, shadowRadius, shadowX, shadowY;    private int pathColor, shadowColor;    private Bitmap cacheBitmap;    private boolean drawn;    public TextShape(Context ctx, AttributeSet attrs) {        super(ctx, attrs);        TypedArray a = ctx.obtainStyledAttributes(attrs ,R.styleable.CustomShape);        pathString = a.getString(R.styleable.CustomShape_path_string);        pathHeight = a.getFloat(R.styleable.CustomShape_path_height, 24f);        pathWidth = a.getFloat(R.styleable.CustomShape_path_width, 24f);        shadowRadius = a.getFloat(R.styleable.CustomShape_shadow_radius, 4f);        pathColor = a.getInteger(R.styleable.CustomShape_path_color, Color.WHITE);        shadowColor = a.getInteger(R.styleable.CustomShape_shadow_color, Color.BLACK);        shadowX = a.getFloat(R.styleable.CustomShape_shadow_x, 0f);        shadowY = a.getFloat(R.styleable.CustomShape_shadow_y, 0f);        AssetManager assetManager = ctx.getAssets();        Typeface comic = Typeface.createFromAsset(assetManager , "comic.ttf");        this.setTypeface(comic);        a.recycle();        setLayerType(LAYER_TYPE_SOFTWARE , null);    }    @SuppressLint("DrawAllocation")    @Override    protected void onDraw(Canvas canvas) {        if(!drawn) {            cacheBitmap = Bitmap.createBitmap(getWidth() , getHeight() , Bitmap.Config.ARGB_8888);            Canvas cache = new Canvas(cacheBitmap);            int w = getWidth(), h = getHeight();            Path path = PathParser.createPathFromPathData(pathString);            path.setFillType(Path.FillType.EVEN_ODD);            Matrix scaleMatrix = new Matrix();            RectF rectF = new RectF();            path.computeBounds(rectF, true);            float x = (float) w / (pathWidth + shadowRadius);            float y = (float) h / (pathHeight + shadowRadius);            scaleMatrix.setScale(x, y, -((shadowRadius / 2f) + (shadowRadius / 16f)), -((shadowRadius / 2f) + (shadowRadius / 16f)));            path.transform(scaleMatrix);            Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);            paint.setStyle(Paint.Style.FILL);            paint.setColor(pathColor);            paint.setShadowLayer(shadowRadius, shadowX, shadowY, shadowColor);            canvas.drawPath(path, paint);            cache.drawPath(path, paint);            path.close();            super.onDraw(canvas);            drawn = true;        }        else            canvas.drawBitmap(cacheBitmap , 0 ,0 , new Paint());    }    @Override    public void setText(CharSequence text, BufferType type) {        drawn = false;        super.setText(text, type);    }}