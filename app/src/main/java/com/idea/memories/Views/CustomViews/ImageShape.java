package com.idea.memories.Views.CustomViews;import android.annotation.SuppressLint;import android.content.Context;import android.content.res.TypedArray;import android.graphics.Bitmap;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Matrix;import android.graphics.Paint;import android.graphics.Path;import android.graphics.PorterDuff;import android.graphics.PorterDuffXfermode;import android.graphics.Rect;import android.graphics.RectF;import android.graphics.drawable.BitmapDrawable;import android.graphics.drawable.Drawable;import android.util.AttributeSet;import com.idea.memories.R;import androidx.appcompat.widget.AppCompatImageView;import androidx.core.graphics.PathParser;public class ImageShape extends AppCompatImageView {    private static Path path;    private static Paint paint;    private String pathString;    private float pathHeight, pathWidth;    private int pathColor, shadowColor, shadowRadius, shadowX, shadowY;    private boolean drawn;    private Bitmap cacheBitmap;    private Canvas cache;    private Drawable cacheDrawable;    public ImageShape(Context context) {        super(context);    }    public ImageShape(Context ctx, AttributeSet attrs) {        super(ctx, attrs);        TypedArray a = ctx.obtainStyledAttributes(attrs ,R.styleable.CustomShape);        pathString = a.getString(R.styleable.CustomShape_path_string);        pathHeight = a.getFloat(R.styleable.CustomShape_path_height, 24f);        pathWidth = a.getFloat(R.styleable.CustomShape_path_width, 24f);        shadowRadius = a.getInteger(R.styleable.CustomShape_shadow_radius, 8);        pathColor = a.getInteger(R.styleable.CustomShape_path_color, Color.WHITE);        shadowColor = a.getInteger(R.styleable.CustomShape_shadow_color, Color.BLACK);        shadowX = a.getInteger(R.styleable.CustomShape_shadow_x, 0);        shadowY = a.getInteger(R.styleable.CustomShape_shadow_y, 0);        a.recycle();        setLayerType(LAYER_TYPE_SOFTWARE , null);    }    @SuppressLint("DrawAllocation")    @Override    protected void onDraw(Canvas canvas) {        int w = getWidth(), h = getHeight();        if(!drawn) {            cacheBitmap = Bitmap.createBitmap(getWidth() , getHeight() , Bitmap.Config.ARGB_8888);            cache = new Canvas(cacheBitmap);            path = PathParser.createPathFromPathData(pathString);            path.setFillType(Path.FillType.WINDING);            Matrix scaleMatrix = new Matrix();            RectF rectF = new RectF();            path.computeBounds(rectF, true);            float x = (float) w / (pathWidth + shadowRadius);            float y = (float) h / (pathHeight + shadowRadius);            scaleMatrix.setScale(x, y, -((shadowRadius / 2f) + (shadowRadius / 16f)), -((shadowRadius / 2f) + (shadowRadius / 16f)));            path.transform(scaleMatrix);            paint = new Paint(Paint.ANTI_ALIAS_FLAG);            paint.setStyle(Paint.Style.FILL);            paint.setColor(pathColor);            paint.setShadowLayer(shadowRadius, shadowX, shadowY, shadowColor);            canvas.drawPath(path, paint);            cache.drawPath(path , paint);            path.close();            drawn = true;        }        else            canvas.drawBitmap(cacheBitmap , 0 ,0 , null);        try {            if(!getDrawable().getConstantState().equals(cacheDrawable.getConstantState()))                throw new Exception();        }catch (Exception ignored){            Drawable drawable = getDrawable();            if (drawable == null | getWidth() == 0 | getHeight() == 0) {                return;            }            cacheDrawable = drawable;            Bitmap b = ((BitmapDrawable) drawable).getBitmap();            try {                Bitmap bitmap = b.copy(Bitmap.Config.ARGB_8888, true);                Bitmap croppedBitmap = getCroppedBitmap(bitmap, w, h);                canvas.drawBitmap(croppedBitmap, 0, 0, null);                cache.drawBitmap(croppedBitmap, 0, 0, null);            }catch (Exception ignored1){}        }    }    /*     */    @Override    public void setImageDrawable(Drawable drawable) {        super.setImageDrawable(drawable);    }    public static Bitmap getCroppedBitmap(Bitmap bitmap, int width , int height) {        Bitmap finalBitmap;        if (bitmap.getWidth() != width | bitmap.getHeight() != height)            finalBitmap = Bitmap.createScaledBitmap(bitmap, width, height,                    false);        else            finalBitmap = bitmap;        Bitmap output = Bitmap.createBitmap(finalBitmap.getWidth(),                finalBitmap.getHeight(),  Bitmap.Config.ARGB_8888);        Canvas canvas = new Canvas(output);        final Rect rect = new Rect(0, 0, finalBitmap.getWidth(),                finalBitmap.getHeight());        paint.setShadowLayer(0 ,0 , 0 , 0);        canvas.drawPath(path , paint);        paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));        canvas.drawBitmap(finalBitmap, rect, rect, paint);        paint.setXfermode(null);        return output;    }    public void setPathColor(int pathColor) {        this.pathColor = pathColor;        drawn = false;    }}