package com.idea.memories.Classes;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteOpenHelper;import android.net.Uri;import android.provider.MediaStore;import android.util.Log;import java.io.File;import java.util.ArrayList;public class MemoriesGenerator extends SQLiteOpenHelper {    private static final String StringArraySeparator = "__,__";    private static final String DATABASE_NAME = "Memories.db";    private static final String MEMORY_TITLE = "TITLE";    private static final String MEMORY_DESC = "DESCRIPTION";    private static final String MEMORY_DATE = "DATE";    private static final String MEMORY_COLOR_HEX = "COLOR";    private static final String MEMORY_BACKGROUND_PHOTO = "BACKGROUND_PHOTO";    private static final String MEMORY_MEDIA_FILES = "MEDIA_FILES";    private static final String MEMORY_IS_FAVORED = "FAVORED";    private static final String MEMORY_IS_DELETED = "DELETED";    private final Context context;    private final ColorsGenerator colorsGenerator;    public MemoriesGenerator(Context context) {        super(context ,  DATABASE_NAME , null , 1);        this.context = context;        colorsGenerator = new ColorsGenerator(context);    }    @Override    public void onCreate(SQLiteDatabase db) {        try {            db.execSQL("create table MEMORIES_TABLE (POSITION INTEGER PRIMARY KEY , TITLE  TEXT, DESCRIPTION TEXT, DATE TEXT, COLOR TEXT , BACKGROUND_PHOTO TEXT , MEDIA_FILES TEXT , FAVORED BOOLEAN , DELETED BOOLEAN)");        }        catch (Exception e){            Log.e(getClass().getName() , e.getMessage());        }    }    @Override    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {        db.execSQL("DROP table if EXISTS MEMORIES_TABLE");        onCreate(db);    }    public ArrayList<Memory> generateMain()    {        ArrayList<Memory> main = new ArrayList<>();        SQLiteDatabase database = this.getWritableDatabase();        Cursor c = database.rawQuery("select * from MEMORIES_TABLE where DELETED IS NOT \"true\" order by -position" , null);        while(c.moveToNext()) {            main.add(new Memory(c.getInt(c.getColumnIndex("POSITION")) , 0 , c.getString(c.getColumnIndex(MEMORY_TITLE)),                    c.getString(c.getColumnIndex(MEMORY_DESC)),                    c.getString(c.getColumnIndex(MEMORY_DATE)),                    convertStringToMediaFile(c.getString(c.getColumnIndex(MEMORY_BACKGROUND_PHOTO))) ,                    convertStringArrayToMediaFileArray(convertStringToArray(c.getString(c.getColumnIndex(MEMORY_MEDIA_FILES)))) ,                    colorsGenerator.getHex(c.getString(c.getColumnIndex(MEMORY_COLOR_HEX))) ,                    Boolean.valueOf(c.getString(c.getColumnIndex(MEMORY_IS_FAVORED))) ,                    false));        }        c.close();        return main;    }    public ArrayList<Memory> generateFavourites()    {        ArrayList<Memory> favourites = new ArrayList<>();        SQLiteDatabase database = this.getWritableDatabase();        Cursor c = database.rawQuery("select * from MEMORIES_TABLE where FAVORED = \"true\" order by -position" , null);        while(c.moveToNext()) {            favourites.add(new Memory(c.getInt(c.getColumnIndex("POSITION")) , 0 , c.getString(c.getColumnIndex(MEMORY_TITLE)),                    c.getString(c.getColumnIndex(MEMORY_DESC)),                    c.getString(c.getColumnIndex(MEMORY_DATE)),                    convertStringToMediaFile(c.getString(c.getColumnIndex(MEMORY_BACKGROUND_PHOTO))) ,                    convertStringArrayToMediaFileArray(convertStringToArray(c.getString(c.getColumnIndex(MEMORY_MEDIA_FILES)))) ,                    colorsGenerator.getHex(c.getString(c.getColumnIndex(MEMORY_COLOR_HEX))) ,                    Boolean.valueOf(c.getString(c.getColumnIndex(MEMORY_IS_FAVORED))) ,                    Boolean.valueOf(c.getString(c.getColumnIndex(MEMORY_IS_DELETED)))));        }        c.close();        return favourites;    }    public ArrayList<Memory> generateDeleted ()    {        ArrayList<Memory> deleted = new ArrayList<>();        SQLiteDatabase database = this.getWritableDatabase();        Cursor c = database.rawQuery("select * from MEMORIES_TABLE where DELETED = \"true\" order by -position" , null);        while(c.moveToNext()) {            deleted.add(new Memory(c.getInt(c.getColumnIndex("POSITION"))  , 0 , c.getString(c.getColumnIndex(MEMORY_TITLE)),                    c.getString(c.getColumnIndex(MEMORY_DESC)),                    c.getString(c.getColumnIndex(MEMORY_DATE)),                    convertStringToMediaFile(c.getString(c.getColumnIndex(MEMORY_BACKGROUND_PHOTO))) ,                    null,                    colorsGenerator.getHex(c.getString(c.getColumnIndex(MEMORY_COLOR_HEX))) ,                    false,                    true));        }        c.close();        return deleted;    }    public ArrayList<Memory> search(String searchKey , int mnen)    {        ArrayList<Memory> search = new ArrayList<>();        SQLiteDatabase database = this.getWritableDatabase();        Cursor c = null;        switch (mnen){            case 0 : c = database.rawQuery("select * from MEMORIES_TABLE where DELETED = \"false\" AND TITLE Like '%"+searchKey+"%' OR DELETED = \"false\" AND DESCRIPTION like '%"+searchKey+"%' OR  DELETED = \"false\" AND DATE Like '%"+searchKey+"%' order by -position" , null);break; // main            case 1 : c = database.rawQuery("select * from MEMORIES_TABLE where FAVORED = \"true\" AND TITLE Like '%"+searchKey+"%' OR FAVORED = \"true\" AND DESCRIPTION like '%"+searchKey+"%' OR FAVORED = \"true\" AND DATE Like '%"+searchKey+"%' order by -position" , null); break; // favourites            case 2 : c = database.rawQuery("select * from MEMORIES_TABLE where DELETED = \"true\" AND TITLE Like '%"+searchKey+"%' OR DELETED = \"true\" AND DESCRIPTION like '%"+searchKey+"%' OR DELETED = \"true\" AND DATE Like '%"+searchKey+"%' order by -position" , null); break; //deleted        }        while(c.moveToNext()) {            search.add(new Memory( c.getInt(c.getColumnIndex("POSITION")), 0, c.getString(c.getColumnIndex(MEMORY_TITLE))  ,                    c.getString(c.getColumnIndex(MEMORY_DESC))  ,                    c.getString(c.getColumnIndex(MEMORY_DATE))  ,                    convertStringToMediaFile(c.getString(c.getColumnIndex(MEMORY_BACKGROUND_PHOTO))) ,                    convertStringArrayToMediaFileArray(convertStringToArray(c.getString(c.getColumnIndex(MEMORY_MEDIA_FILES)))) ,                    colorsGenerator.getHex(c.getString(c.getColumnIndex(MEMORY_COLOR_HEX))) ,                    Boolean.valueOf(c.getString(c.getColumnIndex(MEMORY_IS_FAVORED)) ) ,                    Boolean.valueOf(c.getString(c.getColumnIndex(MEMORY_IS_DELETED)))));        }        c.close();        return search;    }    public void addMemory(Memory memory){        SQLiteDatabase database= this.getWritableDatabase();        database.execSQL("insert into MEMORIES_TABLE values ("+null+" , \""+memory.getTitle()+                "\" ,\" "+memory.getDesc()+                "\" , \""+memory.getDate()+                "\" , \""+ colorsGenerator.getColor(memory.getColorHex())+                "\" , \""+convertMediaFileToString(memory.getMainPhoto())+                "\" , \""+convertArrayToString(convertMediaFileArrayToStringArray(memory.getMediaFiles()))+                "\" , \""+memory.isFavored()+                "\" , \""+memory.isDeleted()+"\" )");        Cursor memoryPosition = database.rawQuery("select position from MEMORIES_TABLE", null);        memoryPosition.moveToLast();        memory.setDBPosition(memoryPosition.getInt(0));    }    public void deleteMemory(Memory memory){        SQLiteDatabase db= this.getWritableDatabase();        db.execSQL("update MEMORIES_TABLE set FAVORED = \"false\"" +                ", DELETED = \"true\"" +                " where POSITION = "+memory.getDBPosition());    }    public void removeMemory(Memory memory){        SQLiteDatabase db= this.getWritableDatabase();        db.execSQL("DELETE FROM MEMORIES_TABLE where POSITION = "+memory.getDBPosition());    }    public void updateMemory(Memory memory){        SQLiteDatabase db= this.getWritableDatabase();        db.execSQL("update MEMORIES_TABLE set TITLE = \""+memory.getTitle()+                "\" , DATE = \""+memory.getDate()+                "\" , DESCRIPTION = \""+memory.getDesc()+                "\" , COLOR = \"" + colorsGenerator.getColor(memory.getColorHex()) +                "\" , BACKGROUND_PHOTO = \""+convertMediaFileToString(memory.getMainPhoto())+                "\" , MEDIA_FILES = \""+convertArrayToString(convertMediaFileArrayToStringArray(memory.getMediaFiles()))+                "\" , DELETED = \""+memory.isDeleted()+                "\" , FAVORED = \""+memory.isFavored()+                "\" where POSITION = "+memory.getDBPosition());    }    public void putIndexes(ArrayList<Memory> arrayList) {        for(int i = 0 ; i < arrayList.size() ; i++)            arrayList.get(i).setPosition(i);    }    public String convertArrayToString(String[] array){        try {            String str = "";            for (int i = 0; i < array.length; i++) {                str = str + array[i];                if (i < array.length - 1) {                    str = str + StringArraySeparator;                }            }            return str;        }catch (Exception e){            Log.e(getClass().getName() , e.getMessage());        }        return null;    }    public String[] convertStringToArray(String str){        try{            String[] arr = str.split(StringArraySeparator);            return arr;        }catch (Exception e){            Log.e(getClass().getName() , e.getMessage());        }        return null;    }    public MediaFile[] convertStringArrayToMediaFileArray(String [] media_files_paths) {        try {            if(media_files_paths [0].contains("null"))                return null;            MediaFile [] mediaFiles = new MediaFile[media_files_paths.length];            for (int i = 0; i < media_files_paths.length; i++) {                String[] mediaFile_path = media_files_paths[i].split(",");                Uri media_file_uri = Uri.fromFile(new File(mediaFile_path[0]));                String media_file_mime_type = mediaFile_path[1];                long media_file_id = Long.valueOf(mediaFile_path[2]);                mediaFiles[i] = new MediaFile(media_file_uri , media_file_mime_type , media_file_id);            }            return mediaFiles;        } catch (Exception e) {            Log.e(getClass().getName() , e.getMessage());            return null;        }    }    public String[] convertMediaFileArrayToStringArray(MediaFile[] media_files){        try {            String[] media_files_paths = new String[media_files.length];            for (int i = 0; i < media_files.length; i++) {                media_files_paths[i] = getPath(media_files[i].getPath()) +","+ media_files[i].getMimeType()+","+media_files[i].getID();            }            return media_files_paths;        }catch (Exception e){            Log.e(getClass().getName() , e.getMessage());            return null;        }    }    public String convertMediaFileToString (MediaFile mediaFile){        try {            return getPath(mediaFile.getPath()) + "," + mediaFile.getMimeType() + "," + mediaFile.getID();        }        catch (Exception e){            return null;        }    }    public MediaFile convertStringToMediaFile (String s){        try{            String[] mediaFile = s.split(",");            return new MediaFile(Uri.fromFile(new File(mediaFile[0])) , mediaFile[1] , Long.valueOf(mediaFile[2]));        }        catch (Exception e){            return null;        }    }    private String getPath(Uri uri)    {        if (uri == null)            return null ;        String[] projection = {MediaStore.Images.Media.DATA};        Cursor cursor = context.getContentResolver().query(uri, projection, null, null, null);        if (cursor == null) {            return uri.getPath();        }        int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);        cursor.moveToFirst();        String s = cursor.getString(column_index);        cursor.close();        return s;    }}